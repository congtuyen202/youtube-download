#!/usr/bin/env python3
"""
YouTube Downloader Console Interface
Giao di·ªán console cho YouTube downloader kh√¥ng c·∫ßn Tcl/Tk
"""

import os
import sys
import yt_dlp
import threading
import time
from datetime import datetime

class YouTubeDownloaderConsole:
    def __init__(self):
        self.output_path = "./downloads"
        self.downloading = False
        
        # T·∫°o th∆∞ m·ª•c downloads m·∫∑c ƒë·ªãnh
        try:
            if not os.path.exists(self.output_path):
                os.makedirs(self.output_path)
                print(f"‚úì ƒê√£ t·∫°o th∆∞ m·ª•c: {self.output_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c downloads: {e}")
            self.output_path = "."
    
    def is_valid_youtube_url(self, url):
        """Ki·ªÉm tra URL YouTube h·ª£p l·ªá"""
        import re
        youtube_patterns = [
            r'(?:https?://)?(?:www\.)?youtube\.com/watch\?v=[\w-]+',
            r'(?:https?://)?(?:www\.)?youtube\.com/playlist\?list=[\w-]+',
            r'(?:https?://)?(?:www\.)?youtube\.com/channel/[\w-]+',
            r'(?:https?://)?(?:www\.)?youtube\.com/@[\w-]+',
            r'(?:https?://)?(?:www\.)?youtube\.com/c/[\w-]+',
            r'(?:https?://)?(?:www\.)?youtube\.com/user/[\w-]+',
            r'(?:https?://)?youtu\.be/[\w-]+',
        ]
        
        for pattern in youtube_patterns:
            if re.match(pattern, url):
                return True
        return False
    
    def log_message(self, message):
        """Ghi log message v·ªõi timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    def download_single_video(self, url, quality="best"):
        """T·∫£i video ƒë∆°n l·∫ª"""
        if not self.is_valid_youtube_url(url):
            print("‚ùå URL kh√¥ng h·ª£p l·ªá!")
            return False
        
        self.log_message(f"B·∫Øt ƒë·∫ßu t·∫£i: {url}")
        
        try:
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            if not os.path.exists(self.output_path):
                os.makedirs(self.output_path)
            
            # C·∫•u h√¨nh format
            if quality == "best":
                format_selector = "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best"
            elif quality == "1080p":
                format_selector = "bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/best[height<=1080]"
            elif quality == "720p":
                format_selector = "bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[height<=720]"
            elif quality == "480p":
                format_selector = "bestvideo[height<=480][ext=mp4]+bestaudio[ext=m4a]/best[height<=480]"
            else:
                format_selector = quality
            
            ydl_opts = {
                'outtmpl': os.path.join(self.output_path, '%(title)s.%(ext)s'),
                'format': format_selector,
                'merge_output_format': 'mp4',
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                self.log_message(f"Ti√™u ƒë·ªÅ: {info.get('title', 'N/A')}")
                self.log_message(f"ƒê·ªô d√†i: {info.get('duration', 'N/A')} gi√¢y")
                self.log_message(f"K√™nh: {info.get('uploader', 'N/A')}")
                
                ydl.download([url])
                
            self.log_message("‚úÖ T·∫£i th√†nh c√¥ng!")
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå L·ªói: {str(e)}")
            return False
    
    def download_playlist(self, url):
        """T·∫£i playlist"""
        if not self.is_valid_youtube_url(url):
            print("‚ùå URL playlist kh√¥ng h·ª£p l·ªá!")
            return False
        
        self.log_message(f"B·∫Øt ƒë·∫ßu t·∫£i playlist: {url}")
        
        try:
            if not os.path.exists(self.output_path):
                os.makedirs(self.output_path)
            
            ydl_opts = {
                'outtmpl': os.path.join(self.output_path, '%(playlist_index)s - %(title)s.%(ext)s'),
                'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
                
            self.log_message("‚úÖ T·∫£i playlist th√†nh c√¥ng!")
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå L·ªói: {str(e)}")
            return False
    
    def download_batch(self, urls, quality="best"):
        """T·∫£i nhi·ªÅu video"""
        if not urls:
            print("‚ùå Kh√¥ng c√≥ URL n√†o!")
            return
        
        # L·ªçc URL h·ª£p l·ªá
        valid_urls = []
        invalid_urls = []
        
        for url in urls:
            url = url.strip()
            if url:
                if self.is_valid_youtube_url(url):
                    valid_urls.append(url)
                else:
                    invalid_urls.append(url)
        
        if invalid_urls:
            print(f"‚ö†Ô∏è  C√°c URL kh√¥ng h·ª£p l·ªá: {invalid_urls}")
        
        if not valid_urls:
            print("‚ùå Kh√¥ng c√≥ URL h·ª£p l·ªá n√†o!")
            return
        
        self.log_message(f"B·∫Øt ƒë·∫ßu t·∫£i {len(valid_urls)} video...")
        
        success_count = 0
        failed_count = 0
        
        for i, url in enumerate(valid_urls, 1):
            self.log_message(f"[{i}/{len(valid_urls)}] ƒêang t·∫£i: {url}")
            
            if self.download_single_video(url, quality):
                success_count += 1
            else:
                failed_count += 1
            
            print("-" * 50)
        
        self.log_message(f"üìä K·∫æT QU·∫¢:")
        self.log_message(f"‚úÖ Th√†nh c√¥ng: {success_count}/{len(valid_urls)}")
        self.log_message(f"‚ùå Th·∫•t b·∫°i: {failed_count}/{len(valid_urls)}")
    
    def check_formats(self, url):
        """Ki·ªÉm tra ch·∫•t l∆∞·ª£ng c√≥ s·∫µn"""
        if not self.is_valid_youtube_url(url):
            print("‚ùå URL kh√¥ng h·ª£p l·ªá!")
            return
        
        self.log_message("ƒêang ki·ªÉm tra c√°c format c√≥ s·∫µn...")
        
        try:
            ydl_opts = {
                'listformats': True,
                'quiet': True,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                formats = info.get('formats', [])
                
                print(f"\nTi√™u ƒë·ªÅ: {info.get('title', 'N/A')}")
                print("=" * 50)
                print("C√ÅC CH·∫§T L∆Ø·ª¢NG VIDEO C√ì S·∫¥N:")
                
                video_formats = []
                audio_formats = []
                
                for f in formats:
                    if f.get('vcodec') != 'none' and f.get('height'):
                        video_formats.append(f)
                    elif f.get('acodec') != 'none' and not f.get('height'):
                        audio_formats.append(f)
                
                for f in sorted(video_formats, key=lambda x: x.get('height', 0), reverse=True):
                    fps = f"@{f.get('fps')}fps" if f.get('fps') else ""
                    size = f" ({f.get('filesize_approx', 'Unknown size')} bytes)" if f.get('filesize_approx') else ""
                    print(f"- {f.get('height')}p{fps} ({f.get('ext')}) - {f.get('format_note', '')}{size}")
                
                print("\nC√ÅC CH·∫§T L∆Ø·ª¢NG AUDIO:")
                for f in audio_formats[:5]:
                    bitrate = f.get('abr', 'Unknown')
                    print(f"- {f.get('ext')} - {bitrate}kbps")
                    
        except Exception as e:
            self.log_message(f"‚ùå L·ªói khi ki·ªÉm tra formats: {str(e)}")
    
    def preview_channel(self, url, limit=10, sort_type="newest"):
        """Xem tr∆∞·ªõc video c·ªßa k√™nh"""
        if not self.is_valid_youtube_url(url):
            print("‚ùå URL k√™nh kh√¥ng h·ª£p l·ªá!")
            return
        
        self.log_message("ƒêang xem tr∆∞·ªõc video c·ªßa k√™nh...")
        
        try:
            # X·ª≠ l√Ω URL k√™nh
            if "/channel/" in url:
                base_url = url
            elif "/@" in url:
                base_url = url
            elif "/c/" in url:
                base_url = url
            elif "/user/" in url:
                base_url = url
            else:
                self.log_message("URL k√™nh kh√¥ng h·ª£p l·ªá!")
                return
            
            if not base_url.endswith('/videos'):
                if base_url.endswith('/'):
                    video_url = base_url + "videos"
                else:
                    video_url = base_url + "/videos"
            else:
                video_url = base_url
            
            ydl_opts = {
                'quiet': True,
                'extract_flat': True,
                'playlistend': limit,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                final_url = f"{video_url}?sort={sort_type}"
                info = ydl.extract_info(final_url, download=False)
                
                if 'entries' in info:
                    channel_name = info.get('uploader', 'Unknown Channel')
                    print(f"\nK√™nh: {channel_name}")
                    print(f"Xem tr∆∞·ªõc {limit} video {sort_type}:")
                    print("=" * 70)
                    
                    for i, entry in enumerate(list(info['entries'])[:limit], 1):
                        title = entry.get('title', 'No title')
                        duration = entry.get('duration_string', 'Unknown')
                        upload_date = entry.get('upload_date', 'Unknown')
                        
                        if upload_date != 'Unknown' and len(upload_date) == 8:
                            formatted_date = f"{upload_date[:4]}-{upload_date[4:6]}-{upload_date[6:8]}"
                        else:
                            formatted_date = upload_date
                        
                        print(f"{i:2d}. {title[:50]}{'...' if len(title) > 50 else ''}")
                        print(f"    Ng√†y: {formatted_date} | Th·ªùi l∆∞·ª£ng: {duration}")
                        print()
                else:
                    print("Kh√¥ng t√¨m th·∫•y video n√†o!")
                    
        except Exception as e:
            self.log_message(f"‚ùå L·ªói khi xem tr∆∞·ªõc: {str(e)}")
    
    def download_channel(self, url, limit=10, sort_type="newest"):
        """T·∫£i video t·ª´ k√™nh"""
        if not self.is_valid_youtube_url(url):
            print("‚ùå URL k√™nh kh√¥ng h·ª£p l·ªá!")
            return False
        
        self.log_message(f"B·∫Øt ƒë·∫ßu t·∫£i {limit} video t·ª´ k√™nh...")
        
        try:
            if not os.path.exists(self.output_path):
                os.makedirs(self.output_path)
            
            # X·ª≠ l√Ω URL k√™nh
            if "/channel/" in url:
                base_url = url
            elif "/@" in url:
                base_url = url
            elif "/c/" in url:
                base_url = url
            elif "/user/" in url:
                base_url = url
            else:
                self.log_message("URL k√™nh kh√¥ng h·ª£p l·ªá!")
                return False
            
            if not base_url.endswith('/videos'):
                if base_url.endswith('/'):
                    video_url = base_url + "videos"
                else:
                    video_url = base_url + "/videos"
            else:
                video_url = base_url
            
            ydl_opts = {
                'outtmpl': os.path.join(self.output_path, '%(uploader)s - %(title)s.%(ext)s'),
                'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                'merge_output_format': 'mp4',
                'playlistend': limit,
            }
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                final_url = f"{video_url}?sort={sort_type}"
                ydl.download([final_url])
                
            self.log_message("‚úÖ T·∫£i video t·ª´ k√™nh th√†nh c√¥ng!")
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå L·ªói: {str(e)}")
            return False
    
    def show_menu(self):
        """Hi·ªÉn th·ªã menu ch√≠nh"""
        print("\n" + "="*60)
        print("üé¨ YOUTUBE VIDEO DOWNLOADER - CONSOLE VERSION")
        print("="*60)
        print("1. T·∫£i video ƒë∆°n l·∫ª")
        print("2. T·∫£i playlist")
        print("3. T·∫£i nhi·ªÅu video")
        print("4. T·∫£i video t·ª´ k√™nh")
        print("5. Xem tr∆∞·ªõc video c·ªßa k√™nh")
        print("6. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng c√≥ s·∫µn")
        print("7. Thay ƒë·ªïi th∆∞ m·ª•c l∆∞u")
        print("8. Tho√°t")
        print("="*60)
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng console"""
        print("üöÄ Kh·ªüi ƒë·ªông YouTube Downloader Console...")
        print(f"üìÅ Th∆∞ m·ª•c l∆∞u: {os.path.abspath(self.output_path)}")
        
        while True:
            self.show_menu()
            
            try:
                choice = input("\nCh·ªçn t√πy ch·ªçn (1-8): ").strip()
                
                if choice == "1":
                    # T·∫£i video ƒë∆°n l·∫ª
                    url = input("Nh·∫≠p URL video: ").strip()
                    if url:
                        quality = input("Ch·∫•t l∆∞·ª£ng (best/1080p/720p/480p) [best]: ").strip() or "best"
                        self.download_single_video(url, quality)
                    else:
                        print("‚ùå Vui l√≤ng nh·∫≠p URL!")
                
                elif choice == "2":
                    # T·∫£i playlist
                    url = input("Nh·∫≠p URL playlist: ").strip()
                    if url:
                        self.download_playlist(url)
                    else:
                        print("‚ùå Vui l√≤ng nh·∫≠p URL!")
                
                elif choice == "3":
                    # T·∫£i nhi·ªÅu video
                    print("Nh·∫≠p danh s√°ch URLs (m·ªói URL m·ªôt d√≤ng, nh·∫≠p 'done' ƒë·ªÉ k·∫øt th√∫c):")
                    urls = []
                    while True:
                        url = input().strip()
                        if url.lower() == 'done':
                            break
                        if url:
                            urls.append(url)
                    
                    if urls:
                        quality = input("Ch·∫•t l∆∞·ª£ng (best/1080p/720p/480p) [best]: ").strip() or "best"
                        self.download_batch(urls, quality)
                    else:
                        print("‚ùå Kh√¥ng c√≥ URL n√†o!")
                
                elif choice == "4":
                    # T·∫£i video t·ª´ k√™nh
                    url = input("Nh·∫≠p URL k√™nh: ").strip()
                    if url:
                        try:
                            limit = int(input("S·ªë video (m·∫∑c ƒë·ªãnh 10): ") or "10")
                        except ValueError:
                            limit = 10
                        
                        print("Ki·ªÉu s·∫Øp x·∫øp:")
                        print("1. M·ªõi nh·∫•t (newest)")
                        print("2. C≈© nh·∫•t (oldest)")
                        print("3. Xem nhi·ªÅu nh·∫•t (popular)")
                        sort_choice = input("Ch·ªçn (1-3) [1]: ").strip() or "1"
                        
                        if sort_choice == "1":
                            sort_type = "newest"
                        elif sort_choice == "2":
                            sort_type = "oldest"
                        elif sort_choice == "3":
                            sort_type = "popular"
                        else:
                            sort_type = "newest"
                        
                        self.download_channel(url, limit, sort_type)
                    else:
                        print("‚ùå Vui l√≤ng nh·∫≠p URL!")
                
                elif choice == "5":
                    # Xem tr∆∞·ªõc video c·ªßa k√™nh
                    url = input("Nh·∫≠p URL k√™nh: ").strip()
                    if url:
                        try:
                            limit = int(input("S·ªë video xem tr∆∞·ªõc (m·∫∑c ƒë·ªãnh 10): ") or "10")
                        except ValueError:
                            limit = 10
                        
                        print("Ki·ªÉu s·∫Øp x·∫øp:")
                        print("1. M·ªõi nh·∫•t (newest)")
                        print("2. C≈© nh·∫•t (oldest)")
                        print("3. Xem nhi·ªÅu nh·∫•t (popular)")
                        sort_choice = input("Ch·ªçn (1-3) [1]: ").strip() or "1"
                        
                        if sort_choice == "1":
                            sort_type = "newest"
                        elif sort_choice == "2":
                            sort_type = "oldest"
                        elif sort_choice == "3":
                            sort_type = "popular"
                        else:
                            sort_type = "newest"
                        
                        self.preview_channel(url, limit, sort_type)
                    else:
                        print("‚ùå Vui l√≤ng nh·∫≠p URL!")
                
                elif choice == "6":
                    # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng
                    url = input("Nh·∫≠p URL video: ").strip()
                    if url:
                        self.check_formats(url)
                    else:
                        print("‚ùå Vui l√≤ng nh·∫≠p URL!")
                
                elif choice == "7":
                    # Thay ƒë·ªïi th∆∞ m·ª•c l∆∞u
                    new_path = input(f"Th∆∞ m·ª•c l∆∞u hi·ªán t·∫°i: {self.output_path}\nNh·∫≠p th∆∞ m·ª•c m·ªõi: ").strip()
                    if new_path:
                        try:
                            if not os.path.exists(new_path):
                                os.makedirs(new_path)
                            self.output_path = new_path
                            print(f"‚úÖ ƒê√£ thay ƒë·ªïi th∆∞ m·ª•c l∆∞u: {os.path.abspath(new_path)}")
                        except Exception as e:
                            print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: {e}")
                    else:
                        print("‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n!")
                
                elif choice == "8":
                    # Tho√°t
                    print("üëã T·∫°m bi·ªát!")
                    break
                
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                
            except KeyboardInterrupt:
                print("\n\nüëã T·∫°m bi·ªát!")
                break
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")

def main():
    """H√†m ch√≠nh"""
    # Ki·ªÉm tra th∆∞ vi·ªán
    try:
        import yt_dlp
    except ImportError:
        print("‚ùå Vui l√≤ng c√†i ƒë·∫∑t yt-dlp: pip install yt-dlp")
        sys.exit(1)
    
    try:
        app = YouTubeDownloaderConsole()
        app.run()
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 